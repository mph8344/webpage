{"version":3,"sources":["menu.svg","MainSides.js","NavBar.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["MainSides","notExtended","React","createRef","isExtended","state","rightExtend","id","ref","this","Button","variant","style","margin","onClick","sides","extended","findDOMNode","current","unextended","leftText","children","buttonText","$","animate","opacity","width","extendedText","temp","handleToggle","Image","src","logo","height","className","Fragment","createLeftSide","createRightSide","Component","NavBar","href","App","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6TAAe,MAA0B,iC,IC6H1BA,E,kDA/DX,aAAe,IAAD,8BACV,gBACKC,YAAcC,IAAMC,YACzB,EAAKC,WAAaF,IAAMC,YACxB,EAAKE,MAAQ,CACTC,aAAa,GALP,E,8DAWK,IAAD,OAEd,OAEI,sBAAKC,GAAG,YAAYC,IAAKC,KAAKR,YAA9B,UACQ,cAACS,EAAA,EAAD,CAEIC,QAAQ,QACRC,MAAS,CAACC,OAAQ,QAClBC,QAAW,kBA1EnC,SAAsBC,GAElB,IAAMC,EAAWC,sBAAYF,EAAMX,WAAWc,SACxCC,EAAaF,sBAAYF,EAAMd,YAAYiB,SAGjD,GAAIH,EAAMV,MAAMC,YAAa,CAEzB,IAAMc,EAAWD,EAAWE,SAAS,GAC/BC,EAAaN,EAASK,SAAS,GAGrCE,IAAED,GAAYE,QAAQ,CAACC,QAAS,GAAI,IAAM,SAG1CF,IAAEP,GAAUQ,QAAQ,CAACE,MAAO,OAAQ,IAAM,SAG1CH,IAAEH,GAAUI,QAAQ,CAACC,QAAS,QAAS,IAAM,UAG7CF,IAAEJ,GAAYK,QAAQ,CAACE,MAAO,OAAS,IAAM,aAE1C,CAGH,IAAMC,EAAeX,EAASK,SAAS,GACjCC,EAAaH,EAAWE,SAAS,GAGvCE,IAAEI,GAAcH,QAAQ,CAACC,QAAS,GAAI,IAAM,SAG5CF,IAAEP,GAAUQ,QAAQ,CAACE,MAAO,OAAQ,IAAM,SAG1CH,IAAED,GAAYE,QAAQ,CAACC,QAAS,QAAS,IAAM,SAG/CF,IAAEJ,GAAYK,QAAQ,CAACE,MAAO,OAAQ,IAAM,SAKhD,IAAME,EAAOZ,EACbD,EAAMX,WAAWc,QAAUC,EAC3BJ,EAAMd,YAAYiB,QAAUU,EAC5Bb,EAAMV,MAAMC,aAAeS,EAAMV,MAAMC,YA2BFuB,CAAa,IAJlC,SAKQ,cAACC,EAAA,EAAD,CAAOC,IAAKC,EAAMC,OAAO,WAGjC,qBAAKC,UAAU,iBAAf,uB,uCAWZ,OACI,qBAAK3B,GAAG,WAAWC,IAAKC,KAAKL,WAA7B,SACQ,qBAAK8B,UAAU,WAAf,SAEI,oD,+BAUhB,OACI,eAAC,IAAMC,SAAP,WAEK1B,KAAK2B,iBACL3B,KAAK4B,yB,GAvDEnC,IAAMoC,WCvCfC,G,6KAdP,OACI,sBAAKhC,GAAG,SAAR,UACI,mBAAGiC,KAAK,QAAR,kBACA,mBAAGA,KAAK,SAAR,mBACA,mBAAGA,KAAK,WAAR,4B,GARKtC,IAAMoC,YCeZG,MAbf,WACE,OACE,sBAAKP,UAAU,MAAf,UACE,cAAC,EAAD,IACA,uBACA,qBAAKA,UAAU,OAAf,SACE,cAAC,EAAD,U,MCCYQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCjBnC,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCEdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBb,MAAK,SAACc,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,YE7G5BtB,M","file":"static/js/main.7b2533aa.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/menu.bea8bf67.svg\";","import React from 'react';\r\nimport './MainSides.css';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Image from 'react-bootstrap/Image';\r\nimport $ from 'jquery';\r\nimport { findDOMNode } from 'react-dom';\r\nimport logo from './menu.svg';\r\n\r\nfunction handleToggle(sides) {\r\n    \r\n    const extended = findDOMNode(sides.isExtended.current);\r\n    const unextended = findDOMNode(sides.notExtended.current);\r\n    \r\n    //console.log(unextendedText);\r\n    if (sides.state.rightExtend) {\r\n        //This means that the button side (right side) is extended\r\n        const leftText = unextended.children[0];\r\n        const buttonText = extended.children[1];\r\n\r\n        // Hide the button side text\r\n        $(buttonText).animate({opacity: 0}, 1000, 'swing');\r\n\r\n        // Shrink the button side\r\n        $(extended).animate({width: \"10%\"}, 1000, 'swing')\r\n\r\n        // Make the left text visible\r\n        $(leftText).animate({opacity: '100%'}, 1000, 'linear');\r\n\r\n        // Extend the left side\r\n        $(unextended).animate({width: '88%',}, 1000, 'swing')\r\n        \r\n    } else {\r\n        \r\n        //This means that the main (left) side is extended\r\n        const extendedText = extended.children[0];\r\n        const buttonText = unextended.children[1];\r\n\r\n        // Hide the left side text\r\n        $(extendedText).animate({opacity: 0}, 1000, 'swing');\r\n\r\n        // Shrink the left side\r\n        $(extended).animate({width: '10%'}, 1000, 'swing')\r\n        \r\n        // Show the button side text\r\n        $(buttonText).animate({opacity: '100%'}, 1000, 'swing');\r\n        \r\n        // Extend the button side\r\n        $(unextended).animate({width: '88%'}, 1000, 'swing')\r\n        \r\n\r\n    }\r\n\r\n    const temp = extended;\r\n    sides.isExtended.current = unextended;\r\n    sides.notExtended.current = temp;\r\n    sides.state.rightExtend = !sides.state.rightExtend;\r\n\r\n\r\n};\r\n\r\nclass MainSides extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.notExtended = React.createRef();\r\n        this.isExtended = React.createRef();\r\n        this.state = {\r\n            rightExtend: false\r\n        }\r\n    }\r\n    \r\n\r\n\r\n    createRightSide() {\r\n\r\n        return(\r\n    \r\n            <div id=\"rightside\" ref={this.notExtended}>\r\n                    <Button \r\n                        \r\n                        variant=\"light\"\r\n                        style = {{margin: \"auto\"}}\r\n                        onClick = {() => handleToggle(this)}>\r\n                            <Image src={logo} height=\"32px\"/>\r\n                    </Button>\r\n\r\n                    <div className=\"interior right\">\r\n                        Test\r\n                    </div>\r\n            </div>\r\n    \r\n        )\r\n    \r\n    }\r\n\r\n    createLeftSide() {\r\n\r\n        return (\r\n            <div id=\"leftside\" ref={this.isExtended}> \r\n                    <div className=\"interior\">\r\n\r\n                        <p>testestestset</p>\r\n                        \r\n                    </div>\r\n            </div>\r\n        )\r\n    \r\n    }\r\n\r\n    render() {\r\n\r\n        return(\r\n            <React.Fragment>\r\n                \r\n                {this.createLeftSide()}\r\n                {this.createRightSide()}\r\n                \r\n            </React.Fragment>\r\n        )\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default MainSides;\r\n","import React from 'react';\r\nimport './NavBar.css'\r\n\r\nclass NavBar extends React.Component {\r\n\r\n    render() {\r\n\r\n        return(\r\n            <div id=\"navbar\">\r\n                <a href=\"#home\">Home</a>\r\n                <a href=\"#about\">About</a>\r\n                <a href=\"#contact\">Contact</a>\r\n\t        </div>\r\n        )\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nexport default NavBar;\r\n","import React from 'react';\nimport './App.css';\nimport MainSides from './MainSides';\nimport NavBar from './NavBar';\n\nfunction App() {\n  return (\n    <div className=\"App\" >\n      <NavBar/>\n      <br/>\n      <div className=\"main\">\n        <MainSides />\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}